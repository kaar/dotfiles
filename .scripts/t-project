#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o pipefail

ROOT_DIR="$HOME/repos/kaar"

usage() {
  cat <<EOF
Usage: $(basename "$0") [options] [project-name]

Manage project-specific tmux sessions in ~/repos/kaar/
Each project is a git repository with its own dedicated tmux session.

Commands:
  $(basename "$0")                 Interactive project selection using fzf
  $(basename "$0") <project-name>  Switch to existing project (errors if not found)
  $(basename "$0") -n <name>       Create new project and switch to it
  $(basename "$0") -l              List all projects
  $(basename "$0") -h              Show this help message

Options:
  -n, --new <name>    Create new project with git repo and optional GitHub repo
  -l, --list          List all projects (● active, ○ inactive)
  -h, --help          Show this help message

Behavior:
  - Switching: Creates tmux session if needed, then attaches/switches
  - Creating: Initializes git repo with formatted README.md title
              Prompts to create private GitHub repository
  - When inside tmux: Switches to the project session
  - When outside tmux: Attaches to the project session

Examples:
  $(basename "$0")              # Select from existing projects interactively
  $(basename "$0") my-app       # Switch to 'my-app' (must already exist)
  $(basename "$0") -n my-app    # Create new project 'my-app'
  $(basename "$0") -l           # List all projects
EOF
}

project_exists() {
  local project_name=$1
  [[ -d "$ROOT_DIR/$project_name" ]]
}

format_project_title() {
  local name=$1

  # Replace hyphens and underscores with spaces
  name="${name//-/ }"
  name="${name//_/ }"

  # Replace dots with spaces (will handle version numbers like 2.1 later)
  name="${name//./ }"

  # Insert space before uppercase letters (camelCase) and before numbers
  # shellcheck disable=SC2001
  name=$(echo "$name" | sed 's/\([a-z]\)\([A-Z]\)/\1 \2/g; s/\([a-zA-Z]\)\([0-9]\)/\1 \2/g')

  # Capitalize first letter of each word
  local result=""
  for word in $name; do
    result="$result ${word^}"
  done

  echo "${result# }"
}

create_project() {
  local project_name=$1
  local project_dir="$ROOT_DIR/$project_name"

  if [[ -d "$project_dir" ]]; then
    echo "Project directory $project_dir already exists."
    exit 1
  fi

  echo "Creating project directory $project_dir"
  mkdir -p "$project_dir"
  cd "$project_dir" || exit 1
  git init

  local project_title
  project_title=$(format_project_title "$project_name")
  echo "# $project_title" >README.md

  git add README.md
  git commit -m "Initial commit"
  # Ask if to create a GitHub repository.
  read -r -p "Create a private GitHub repository for $project_name? (y/n) " response
  if [[ ! "$response" =~ ^[Yy]$ ]]; then
    return
  fi
  echo "Creating GitHub repository kaar/$project_name"
  gh repo create kaar/"$project_name" --private --source=. --remote=origin --push
  echo "Project $project_name created at $project_dir and pushed to GitHub."
}

list_projects() {
  local active_sessions
  mapfile -t active_sessions < <(tmux list-sessions -F '#{session_name}' 2>/dev/null || true)

  # Create associative array for O(1) lookup
  declare -A is_active
  for session in "${active_sessions[@]}"; do
    is_active[$session]=1
  done

  # Process and output (avoiding subshell from pipe)
  while IFS='|' read -r status project; do
    if [[ "$status" == "0" ]]; then
      echo -e "\033[1;32m● $project\033[0m"
    else
      echo -e "\033[2m○ $project\033[0m"
    fi
  done < <(
    while IFS= read -r project; do
      if [[ -n "${is_active[$project]:-}" ]]; then
        echo "0|$project"
      else
        echo "1|$project"
      fi
    done < <(find "$ROOT_DIR" -maxdepth 1 -mindepth 1 -type d -exec basename {} \;) | sort -t'|' -k1
  )
}

switch_to_project() {
  local project_name=$1
  local project_dir="$ROOT_DIR/$project_name"

  # Check if tmux session exists, create it if it doesn't
  local session_name="$project_name"
  if ! tmux has-session -t "$session_name" 2>/dev/null; then
    tmux new-session -ds "$session_name" -c "$project_dir"
  fi

  # Attach or switch tmux session
  if [ -z "${TMUX-}" ]; then
    tmux attach-session -t "$session_name"
  else
    tmux switch-client -t "$session_name"
  fi
}

select_project() {
  local selection
  selection=$(list_projects | fzf --reverse --ansi \
    --header "Select project" \
    --preview "PROJECT=\$(echo {} | sed 's/^[●○] //'); \
               echo -e '\033[1;34mPath:\033[0m $ROOT_DIR/\$PROJECT'; \
               echo -e '\033[2m───────────────────────────────────────\033[0m'; \
               if tmux has-session -t \$PROJECT 2>/dev/null; then \
                 echo -e '\033[1;32m● Active tmux session\033[0m'; \
               else \
                 echo -e '\033[2m○ No active session\033[0m'; \
               fi; \
               echo -e '\033[2m───────────────────────────────────────\033[0m'; \
               git -C $ROOT_DIR/\$PROJECT log -1 --format='%C(yellow)Last commit:%C(reset) %ar%n%C(yellow)Author:%C(reset) %an' 2>/dev/null || echo -e '\033[2mNo commits yet\033[0m'; \
               echo -e '\033[2m───────────────────────────────────────\033[0m'; \
               ls -1 $ROOT_DIR/\$PROJECT")

  [[ -z "$selection" ]] && return 1
  # Strip status indicator (● or ○)
  echo "${selection//[●○] /}"
}

case "${1:-}" in
-h | --help)
  usage
  exit 0
  ;;
-l | --list)
  list_projects
  exit 0
  ;;
-n | --new)
  if [[ -z "${2:-}" ]]; then
    echo "Error: Project name required for -n/--new flag"
    echo "Usage: $(basename "$0") -n <project-name>"
    exit 1
  fi
  project_name="${2}"
  if project_exists "$project_name"; then
    echo "Error: Project '$project_name' already exists"
    exit 1
  fi
  create_project "$project_name"
  switch_to_project "$project_name"
  exit 0
  ;;
esac

project_name="${1:-}"

# If no project name is given, select from existing projects using fzf.
if [[ -z "$project_name" ]]; then
  if ! project_name=$(select_project); then
    exit 1
  fi
fi

# Switch to existing project only
if ! project_exists "$project_name"; then
  echo "Error: Project '$project_name' does not exist"
  echo "Create it with: $(basename "$0") -n $project_name"
  exit 1
fi

switch_to_project "$project_name"
