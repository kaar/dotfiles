#!/home/tibber/.scripts/py-scripts/.venv/bin/python3
# TODO:
# Fix the .venv path, create one for scripts

import sys
import os
import logging
import argparse

from openai import OpenAI

LOG_LEVEL = logging.WARNING
logging.basicConfig(level=LOG_LEVEL, format="%(message)s")
LOGGER = logging.getLogger(__name__)

MODEL = "gpt-4o"
TEMPERATURE = 0.2
DEFAULT_MODEL = "gpt-4o"

templates = {
    "commit": """
Act as a professional git commit message writer.

You will receive a git diff and respond with a git commit message following these guidelines:

1. Limit the subject line to 50 characters.
2. Capitalize the subject line without ending it with a period.
3. Use the imperative mood for the subject line.
4. Separate the subject from the body with a blank line.
5. Wrap the body at 72 characters.
6. Keep the body concise, focusing on **what** and **why** rather than **how**.
7. If necessary, include code snippets to clarify intent or logic changes.

### Additional Tasks:
* Identify any obvious bugs in the diff and summarize them at the end.
* Ensure clarity and precisionâ€”brevity is key.
"""
}


def create_request(instruction, input, stream=False):
    client = OpenAI(
        # This is the default and can be omitted
        api_key=os.environ.get("OPENAI_API_KEY"),
    )
    if input == "":
        raise ValueError("Input cannot be empty")

    messages = []
    if instruction:
        messages.append({"role": "system", "content": f"{instruction}"})

    messages.append({"role": "user", "content": f"{input}"})
    if stream:
        stream = client.chat.completions.create(
            messages=messages,
            model=MODEL,
            temperature=TEMPERATURE,
            stream=True,
        )
        for chunk in stream:
            print(chunk.choices[0].delta.content or "", end="")
        return

    response = client.chat.completions.create(
        messages=messages,
        model=MODEL,
        temperature=TEMPERATURE,
    )
    return response.choices[0].message.content


if __name__ == "__main__":
    argparser = argparse.ArgumentParser()
    argparser.add_argument("-i", "--instruction", type=str, help="Instruction")
    argparser.add_argument("-s", "--stream", action="store_true", help="Stream")
    argparser.add_argument("-t", "--template", type=str, help="Use a template")
    args = argparser.parse_args()
    if template := args.template:
        if template not in templates:
            print(f"Can't find template {template}")
            print("Available templates:")
            for template in templates:
                print(f"  {template}")
            exit(1)

    instruction = args.instruction if args.instruction else None
    input = sys.stdin.read().strip()
    stream = args.stream
    instruction = templates.get(template) or instruction

    response = create_request(instruction, input, stream=stream)
    print(response)
