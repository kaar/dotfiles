#!/usr/bin/env bash
# LOG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/aws-logs"

help="Usage: aws-logs <service-name> [options]

This script queries AWS CloudWatch Logs

Arguments:
  <service-name>  The name of the service to query
                  Optional if LOG_GROUP_NAME is set in your environment
Commands:
  get             Get logs for a service
  stream          Stream logs for a service

Options:
  -h, --help      Show this help message and exit
  -f, --file      FQuery file to us with jq
  -s, --since     Only return logs newer than a relative duration like 5s, 2m, or 3h

Examples:
  aws-logs -f query.jq

query.jq:
select(.level == \"warning\")
  | {timestamp: .timestamp, event: .event, state: .state}
"

JQ_FILE=""
SINCE="10m"

# Parse arguments
# https://stackoverflow.com/a/14203146/1123955
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  case $1 in
    --help|-h)
        echo "$help"
        exit 0
        ;;
    -f|--file)
      JQ_FILE="$2"
      shift # past argument
      shift # past value
      ;;
    -s|--since)
      SINCE="$2"
      shift # past argument
      shift # past value
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

service="${POSITIONAL_ARGS[0]:-${LOG_GROUP_NAME:-}}"

if [[ -z "$service" ]]; then
    echo "$help"
    exit 0
fi

jq_args=()
if [[ -n "$JQ_FILE" ]]; then
    jq_args+=("-f" "$JQ_FILE")
fi

aws logs tail "${service}" \
 --format "short" \
 --since "${SINCE}" \
 | cut -d' ' -f2- \
 | jq "${jq_args[@]}"

### GET LOGS ###
# log_group_name="prod-pydemandresponse"
# log_stream_name="prod/tibber_pydemandresponse/5dbc2b1f98794efdbef93c7d53f30362"

# # log_stream_name=$(aws logs describe-log-streams \
# #   --log-group-name "$service" \
# #   --output json \
# #   | jq -r '.logStreams[-1].logStreamName'
# # )
# # log_stream_name="prod/tibber_pydemandresponse/010765c7415848e99320625eefa6c56f"

# # Replace with your date and hour
# date="2023-07-15"
# hour="15"

# # Define start and end times
# start_time_str="${date} ${hour}:00:00"
# end_time_str="${date} ${hour}:59:59"

# # Convert to epoch milliseconds
# start_time_epoch=$(date -d "$start_time_str" +%s%3N)
# end_time_epoch=$(date -d "$end_time_str" +%s%3N)

# # Fetch the logs
# aws logs get-log-events \
#   --log-group-name $log_group_name \
#   --log-stream-name $log_stream_name \
#   | jq '.events[].message | fromjson'

# # Example:
# # Select all events that are not "update state" and print the date and event
# # aws-logs \
# #   | jq -r 'select(.event != "update state") | "\(.timestamp | split("T")[0]) \(.event)"'
